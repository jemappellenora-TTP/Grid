{"version":3,"sources":["components/TableCol.jsx","components/TableRow.jsx","components/Table.jsx","App.js","serviceWorker.js","index.js"],"names":["TableCol","props","onClick","onClickChange","TableRow","createCells","cols","i","cells","push","this","Component","Table","addRows","setState","rows","state","addCollumns","removeRows","removeCollumns","selectacolor","e","selectedColor","target","value","style","backgroundColor","createRows","defaultColor","id","onChange","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oNAKeA,MAHf,SAAkBC,GAChB,OAAO,wBAAIC,QAASD,EAAME,iBCabC,EAbf,4MACEC,YAAc,WAEZ,IADA,IAAIC,EAAO,GACFC,EAAI,EAAGA,EAAI,EAAKN,MAAMO,MAAOD,IACpCD,EAAKG,KAAK,kBAAC,EAAD,CAAUN,cAAe,EAAKF,MAAME,iBAEhD,OAAOG,GANX,uDASI,OAAO,4BAAKI,KAAKL,mBATrB,GAA8BM,aCyEfC,EAzEf,kDACE,aAAe,IAAD,8BACZ,gBASFC,QAAU,WACR,EAAKC,SAAS,CAAEC,KAAM,EAAKC,MAAMD,KAAO,KAX5B,EAadE,YAAc,WACZ,EAAKH,SAAS,CAAEN,MAAO,EAAKQ,MAAMR,MAAQ,KAd9B,EAgBdU,WAAa,WACP,EAAKF,MAAMD,KAAO,EACpB,EAAKD,SAAS,CAAEC,KAAM,EAAKC,MAAMD,KAAO,IAGxC,EAAKD,SAAS,CAAEC,KAAM,EAAGP,MAAO,KArBtB,EAwBdW,eAAiB,WACX,EAAKH,MAAMR,MAAQ,EACrB,EAAKM,SAAS,CAAEN,MAAO,EAAKQ,MAAMR,MAAQ,IAG1C,EAAKM,SAAS,CAAEN,MAAO,EAAGO,KAAM,KA7BtB,EAiCdK,aAAe,SAACC,GACd,EAAKP,SAAS,CAAEQ,cAAeD,EAAEE,OAAOC,SAlC5B,EAqCdrB,cAAgB,SAACkB,GACfA,EAAEE,OAAOE,MAAMC,gBAAkB,EAAKV,MAAMM,eAtChC,EAwCdK,WAAa,WAEX,IADA,IAAIZ,EAAO,GACFR,EAAI,EAAGA,EAAI,EAAKS,MAAMD,KAAMR,IACnCQ,EAAKN,KACH,kBAAC,EAAD,CAAUD,MAAO,EAAKQ,MAAMR,MAAOL,cAAe,EAAKA,iBAG3D,OAAOY,GA7CP,EAAKC,MAAQ,CACXD,KAAM,EACNP,MAAO,EACPoB,aAAc,QACdN,cAAe,MANL,EADhB,qDAmDI,OACE,oCACE,yBAAKO,GAAG,WACN,4BAAQ3B,QAASQ,KAAKG,SAAtB,aACA,4BAAQX,QAASQ,KAAKO,aAAtB,eACA,4BAAQf,QAASQ,KAAKQ,YAAtB,gBACA,4BAAQhB,QAASQ,KAAKS,gBAAtB,mBAEF,iDACA,4BAAQW,SAAUpB,KAAKU,cACrB,4BAAQI,MAAOd,KAAKM,MAAMY,cAA1B,yBACA,4BAAQJ,MAAM,QAAd,QACA,4BAAQA,MAAM,SAAd,SACA,4BAAQA,MAAM,UAAd,UACA,4BAAQA,MAAM,UAAd,WAEF,+BAAQd,KAAKiB,mBAnErB,GAA2BhB,aCOZoB,G,6KAJX,OAAO,kBAAC,EAAD,U,GAFOpB,cCQEqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.91fca71c.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nfunction TableCol(props){\r\n  return(<td onClick={props.onClickChange}></td>)\r\n}\r\nexport default TableCol;","import React, { Component } from \"react\";\r\nimport TableCol from \"./TableCol\";\r\n\r\nexport class TableRow extends Component {\r\n  createCells = () => {\r\n    let cols = [];\r\n    for (let i = 0; i < this.props.cells; i++) {\r\n      cols.push(<TableCol onClickChange={this.props.onClickChange} />);\r\n    }\r\n    return cols;\r\n  };\r\n  render() {\r\n    return <tr>{this.createCells()}</tr>;\r\n  }\r\n}\r\n\r\nexport default TableRow;\r\n","import React, { Component } from \"react\";\r\nimport TableRow from \"./TableRow\";\r\n\r\nexport class Table extends Component {\r\n  constructor() {\r\n    super();\r\n    this.state = {\r\n      rows: 0,\r\n      cells: 1,\r\n      defaultColor: \"white\",\r\n      selectedColor: null,\r\n    };\r\n  }\r\n\r\n  addRows = () => {\r\n    this.setState({ rows: this.state.rows + 1 });\r\n  };\r\n  addCollumns = () => {\r\n    this.setState({ cells: this.state.cells + 1 });\r\n  };\r\n  removeRows = () => {\r\n    if (this.state.rows > 0) {\r\n      this.setState({ rows: this.state.rows - 1 });\r\n    } else {\r\n    // if it is zero\r\n      this.setState({ rows: 0, cells: 1 });\r\n    }\r\n  };\r\n  removeCollumns = () => {\r\n    if (this.state.cells > 0) {\r\n      this.setState({ cells: this.state.cells - 1 });\r\n    } else {\r\n    // if it is zero\r\n      this.setState({ cells: 1, rows: 0 });\r\n    }\r\n  };\r\n\r\n  selectacolor = (e) => {\r\n    this.setState({ selectedColor: e.target.value });\r\n  };\r\n  \r\n  onClickChange = (e) => {\r\n    e.target.style.backgroundColor = this.state.selectedColor;\r\n  };\r\n  createRows = () => {\r\n    let rows = [];\r\n    for (let i = 0; i < this.state.rows; i++) {\r\n      rows.push(\r\n        <TableRow cells={this.state.cells} onClickChange={this.onClickChange} />\r\n      );\r\n    }\r\n    return rows;\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <div id=\"buttons\">\r\n          <button onClick={this.addRows}>Add a row</button>\r\n          <button onClick={this.addCollumns}>Add a cells</button>\r\n          <button onClick={this.removeRows}>Remove a row</button>\r\n          <button onClick={this.removeCollumns}>Remove a cells</button>\r\n        </div>\r\n        <span>Select A color:</span>\r\n        <select onChange={this.selectacolor}>\r\n          <option value={this.state.defaultColor}>Please select a Color</option>\r\n          <option value=\"Blue\">Blue</option>          \r\n          <option value=\"green\">Green</option>\r\n          <option value=\"orange\">Orange</option>\r\n          <option value=\"yellow\">Yellow</option>\r\n        </select>\r\n        <table>{this.createRows()}</table>\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Table;\r\n","import React, { Component } from \"react\";\r\nimport Table from \"./components/Table\";\r\nimport \"./App.css\";\r\n\r\nclass App extends Component {\r\n  render() {\r\n    return <Table />;\r\n  }\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}